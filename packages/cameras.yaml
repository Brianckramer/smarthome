###############################################################################
#   @author         :   Mahasri Kalavala
#   @date           :   07/16/2017
#   @package        :   Cameras
#   @description    :   Cameras and the automations
###############################################################################
homeassistant:
  customize:

    ################################################
    ## Node Anchors
    ################################################

    package.node_anchors:
      customize: &customize
        package: 'cameras'

      exposed: &exposed
        <<: *customize
        emulated_hue_hidden: true
        homebridge_hidden: false
        critical: true

      not_exposed: &not_exposed
        <<: *customize
        emulated_hue_hidden: false
        homebridge_hidden: true
        critical: false

      hidden: &hidden
        <<: *customize
        hidden: true
        critical: false

# Front Door Camera
    binary_sensor.frontdoor_camera_motion:
      friendly_name: Frontdoor Camera Motion
      hidden: false
    binary_sensor.frontdoor_camera_field_detection:
      friendly_name: Frontdoor Field Detection
      hidden: false
    binary_sensor.frontdoor_camera_line_crossing:
      friendly_name: Frontdoor Line Crossing
      hidden: false
    binary_sensor.frontdoor_camera_tamper_detection:
      friendly_name: Frontdoor Camera Tamper Detection
      hidden: false

# Driveway Camera
    binary_sensor.driveway_camera_motion:
      friendly_name: Driveway Camera Motion
      hidden: false
    binary_sensor.driveway_camera_field_detection:
      friendly_name: Driveway Field Detection
      hidden: false
    binary_sensor.driveway_camera_line_crossing:
      friendly_name: Driveway Line Crossing
      hidden: false
    binary_sensor.driveway_camera_tamper_detection:
      friendly_name: Driveway Camera Tamper Detection
      hidden: false

# Patio Camera
    binary_sensor.patio_camera_motion:
      friendly_name: Patio Camera Motion
      hidden: false
    binary_sensor.patio_camera_field_detection:
      friendly_name: Patio Field Detection
      hidden: false
    binary_sensor.patio_camera_line_crossing:
      friendly_name: Patio Line Crossing
      hidden: false
    binary_sensor.patio_camera_tamper_detection:
      friendly_name: Patio Camera Tamper Detection
      hidden: false

# Playarea Camera
    binary_sensor.playarea_camera_motion:
      friendly_name: Playarea Camera Motion
      hidden: false
    binary_sensor.playarea_camera_field_detection:
      friendly_name: Playarea Field Detection
      hidden: false
    binary_sensor.playarea_camera_line_crossing:
      friendly_name: Playarea Line Crossing
      hidden: false
    binary_sensor.playarea_camera_tamper_detection:
      friendly_name: Playarea Camera Tamper Detection
      hidden: false

    image_processing.facebox_frontdoor_camera:
      friendly_name: People @ Front Door
    image_processing.facebox_driveway_camera:
      friendly_name: People @ Driveway
    image_processing.facebox_patio_camera:
      friendly_name: People @ Patio
    image_processing.facebox_playarea_camera:
      friendly_name: People @ Playarea

    image_processing.tagbox_frontdoor_camera:
      friendly_name: Frontdoor Tag
    image_processing.tagbox_driveway_camera:
      friendly_name: Driveway Tag
    image_processing.tagbox_playarea_camera:
      friendly_name: Playarea Tag
    image_processing.tagbox_patio_camera:
      friendly_name: Patio Tag

    sensor.frontdoor_camera_tags:
      friendly_name: At Front Door
    sensor.driveway_camera_tags:
      friendly_name: At Driveway
    sensor.playarea_camera_tags:
      friendly_name: At Playarea
    sensor.patio_camera_tags:
      friendly_name: At Patio

group:
  Frontyard Cameras:
    entities:
      - camera.frontdoor_camera
      - camera.driveway_camera
      - camera.garage_camera

  Backyard Cameras:
    entities:
      - camera.patio_camera
      - camera.playarea_camera

  Camera Motion:
    entities:
      - binary_sensor.frontdoor_camera_motion
      - binary_sensor.driveway_camera_motion
      - binary_sensor.patio_camera_motion
      - binary_sensor.playarea_camera_motion

  Camera Field Detection:
    entities:
      - binary_sensor.frontdoor_camera_field_detection
      - binary_sensor.driveway_camera_field_detection
      - binary_sensor.patio_camera_field_detection
      - binary_sensor.playarea_camera_field_detection
      
  Camera Line Crossing:
    entities:
      - binary_sensor.frontdoor_camera_line_crossing
      - binary_sensor.driveway_camera_line_crossing
      - binary_sensor.patio_camera_line_crossing
      - binary_sensor.playarea_camera_line_crossing

  Camera Tamper Detection:
    entities:
      - binary_sensor.frontdoor_camera_tamper_detection
      - binary_sensor.driveway_camera_tamper_detection
      - binary_sensor.patio_camera_tamper_detection
      - binary_sensor.playarea_camera_tamper_detection

  People That Cameras See:
    entities:
      - image_processing.facebox_frontdoor_camera
      - image_processing.facebox_driveway_camera
      - image_processing.facebox_patio_camera
      - image_processing.facebox_playarea_camera

  Tags That Cameras Identified:
    entities:
      - image_processing.tagbox_frontdoor_camera
      - image_processing.tagbox_driveway_camera
      - image_processing.tagbox_playarea_camera
      - image_processing.tagbox_patio_camera

  Camera Activity:
    entities:
      - sensor.frontdoor_camera_tags
      - sensor.driveway_camera_tags
      - sensor.playarea_camera_tags
      - sensor.patio_camera_tags

#
# The camera url format in secrets.yaml would look like this: 
# frontdoor_camera_url: http://username:password@192.168.xxx.xxx/ISAPI/Streaming/channels/101/picture
#
camera:
  - platform: generic
    name: Frontdoor Camera
    still_image_url: !secret frontdoor_camera_url

  - platform: generic
    name: Driveway Camera
    still_image_url: !secret driveway_camera_url

  - platform: generic
    name: Patio Camera
    still_image_url: !secret patio_camera_url

  - platform: generic
    name: Playarea Camera
    still_image_url: !secret playarea_camera_url

  - platform: mjpeg
    mjpeg_url: http://192.168.1.189:8081
    name: Garage Camera

image_processing:
  - platform: facebox
    ip_address: !secret ha_ip_address
    scan_interval: 360
    port: 8080
    source:
      - entity_id: camera.frontdoor_camera
      - entity_id: camera.driveway_camera
      - entity_id: camera.patio_camera
      - entity_id: camera.playarea_camera

  - platform: tagbox
    scan_interval: 10000 # Default 10
    ip_address: !secret ha_ip_address
    port: 8081
    source:
      - entity_id: camera.frontdoor_camera
      - entity_id: camera.driveway_camera
      - entity_id: camera.patio_camera
      - entity_id: camera.playarea_camera

binary_sensor:

  - platform: hikvision
    name: Frontdoor Camera
    host: !secret frontdoor_camera_ip
    username: !secret camera_username
    password: !secret camera_password
    
  - platform: hikvision
    name: Driveway Camera
    host: !secret driveway_camera_ip
    username: !secret camera_username
    password: !secret camera_password

  - platform: hikvision
    name: Patio Camera
    host: !secret patio_camera_ip
    username: !secret camera_username
    password: !secret camera_password

  - platform: hikvision
    name: Playarea Camera
    host: !secret playarea_camera_ip
    username: !secret camera_username
    password: !secret camera_password

sensor:

#
# The following sensors eliminates all the common, "unwanted" objects/tags that are found by the tagbox, and only shows that are interesting.
# The cameras always sees certain things (common_tags). I'm interested in anything other than these common items. I don't want to be alerted because camera found "Asphalt" ;)
# This sensor is then used to alert me of a significant change.
#
  - platform: template
    sensors:
      frontdoor_camera_tags:
        value_template: >-
          {% set common_tags = ['Asphalt', 'Automotive exterior', 'Backyard', 
                                'City', 'Driving', 'Estate', 'Flower', 'Garden', 'Grass', 
                                'Highway', 'Infrastructure', 'Land vehicle', 'Lane', 'Lawn', 
                                'Neighbourhood', 'Public space', 'Race track', 
                                'Residential area', 'Road', 'Road surface', 'Sidewalk', 'Tarmac', 
                                'Transport', 'Walkway', 'Yard',
                                'Screenshot', 'Night', 'Lighting and Light', 'Black-and-white', 'Monochrome', 
                                'Monochrome photography', 'Black and White'] %}
          {% set new_tags = states.image_processing.tagbox_frontdoor_camera.attributes['tags']|map(attribute='name')|list %}
          {% macro tags_added(before_list, after_list) %}
            {%- for tag in after_list if tag != 'None' and tag not in before_list %}
              {%- if loop.first %}{% elif loop.last %} and {% else %}, {% endif -%}
              {{ tag }}
            {%- endfor -%}
          {%- endmacro -%}
          {%- macro list_diff(before_list, after_list) -%}
           {%- set added = tags_added(before_list, after_list) -%}
           {% if added | trim != "" %}{{ added }}{%- endif -%}
          {%- endmacro -%}
          {{ list_diff(common_tags, new_tags) }}
        icon_template: mdi:cctv

  - platform: template
    sensors:
      driveway_camera_tags:
        value_template: >-
          {% set common_tags = ['Asphalt', 'Automotive exterior', 'Backyard', 
                                'City', 'Driving', 'Estate', 'Flower', 'Garden', 'Grass', 
                                'Highway', 'Infrastructure', 'Land vehicle', 'Lane', 'Lawn', 
                                'Neighbourhood', 'Public space', 'Race track', 
                                'Residential area', 'Road', 'Road surface', 'Sidewalk', 'Tarmac', 
                                'Transport', 'Walkway', 'Yard',
                                'Screenshot', 'Night', 'Lighting and Light', 'Black-and-white', 
                                'Monochrome', 'Monochrome photography', 'Black and White'] %}
          {% set new_tags = states.image_processing.tagbox_driveway_camera.attributes['tags']|map(attribute='name')|list %}
          {% macro tags_added(before_list, after_list) %}
            {%- for tag in after_list if tag != 'None' and tag not in before_list %}
              {%- if loop.first %}{% elif loop.last %} and {% else %}, {% endif -%}
              {{ tag }}
            {%- endfor -%}
          {%- endmacro -%}
          {%- macro list_diff(before_list, after_list) -%}
           {%- set added = tags_added(before_list, after_list) -%}
           {% if added | trim != "" %}{{ added }}{%- endif -%}
          {%- endmacro -%}
          {{ list_diff(common_tags, new_tags) }}
        icon_template: mdi:cctv

  - platform: template
    sensors:
      patio_camera_tags:
        value_template: >-
          {% set common_tags = ['Asphalt', 'Automotive exterior', 'Backyard', 'Car', 
                                'City', 'Driving', 'Estate', 'Flower', 'Garden', 'Grass', 
                                'Highway', 'Infrastructure', 'Land vehicle', 'Lane', 'Lawn', 
                                'Luxury vehicle', 'Neighbourhood', 'Public space', 'Race track', 
                                'Residential area', 'Road', 'Road surface', 'Sidewalk', 'Tarmac', 
                                'Transport', 'Vehicle', 'Walkway', 'Yard', 
                                'Screenshot', 'Night', 'Lighting and Light', 'Black-and-white', 
                                'Monochrome', 'Monochrome photography', 'Black and White'] %}
          {% set new_tags = states.image_processing.tagbox_patio_camera.attributes['tags']|map(attribute='name')|list %}
          {% macro tags_added(before_list, after_list) %}
            {%- for tag in after_list if tag != 'None' and tag not in before_list %}
              {%- if loop.first %}{% elif loop.last %} and {% else %}, {% endif -%}
              {{ tag }}
            {%- endfor -%}
          {%- endmacro -%}
          {%- macro list_diff(before_list, after_list) -%}
           {%- set added = tags_added(before_list, after_list) -%}
           {% if added | trim != "" %}{{ added }}{%- endif -%}
          {%- endmacro -%}
          {{ list_diff(common_tags, new_tags) }}
        icon_template: mdi:cctv

  - platform: template
    sensors:
      playarea_camera_tags:
        value_template: >-
          {% set common_tags = ['Asphalt', 'Automotive exterior', 'Backyard', 'Car', 
                                'City', 'Driving', 'Estate', 'Flower', 'Garden', 'Grass', 
                                'Highway', 'Infrastructure', 'Land vehicle', 'Lane', 'Lawn', 
                                'Luxury vehicle', 'Neighbourhood', 'Public space', 'Race track', 
                                'Residential area', 'Road', 'Road surface', 'Sidewalk', 'Tarmac', 
                                'Transport', 'Vehicle', 'Walkway', 'Yard',
                                'Screenshot', 'Night', 'Lighting and Light', 'Black-and-white', 
                                'Monochrome', 'Monochrome photography', 'Black and White'] %}
          {% set new_tags = states.image_processing.tagbox_playarea_camera.attributes['tags']|map(attribute='name')|list %}
          {% macro tags_added(before_list, after_list) %}
            {%- for tag in after_list if tag != 'None' and tag not in before_list %}
              {%- if loop.first %}{% elif loop.last %} and {% else %}, {% endif -%}
              {{ tag }}
            {%- endfor -%}
          {%- endmacro -%}
          {%- macro list_diff(before_list, after_list) -%}
           {%- set added = tags_added(before_list, after_list) -%}
           {% if added | trim != "" %}{{ added }}{%- endif -%}
          {%- endmacro -%}
          {{ list_diff(common_tags, new_tags) }}
        icon_template: mdi:cctv

automation:

  - alias: Alert Abnormal Activity
    initial_state: true
    hide_entity: true
    trigger:
      - platform: state
        entity_id:
          - sensor.frontdoor_camera_tags
          - sensor.driveway_camera_tags
          - sensor.patio_camera_tags
          - sensor.playarea_camera_tags
    condition:
      - condition: template
        value_template: '{{ trigger.to_state.state |trim != "" }}'
      - condition: template
        value_template: '{{states.sun.sun.state == "above_horizon"}}'
    action:
      - service: script.notify_me
        data_template:
          message: "{{ trigger.to_state.state }} detected on {{ states['camera'][trigger.entity_id.split('.')[1].split('_')[0] ~ '_camera'].attributes.friendly_name }}!"
      - service: script.voice_notify
        data_template:
          message: "{{ trigger.to_state.state }} detected on {{ states['camera'][trigger.entity_id.split('.')[1].split('_')[0] ~ '_camera'].attributes.friendly_name }}!"

#
# This automation basically scans image and keeps a count of people from each camera view and notifies using iOS notification
# There is another automation that alerts in the house (using TTS) based on the data
#
  - alias: Scan People and Notify
    initial_state: true
    hide_entity: true
    trigger:
     - platform: state
       entity_id:
         - binary_sensor.frontdoor_camera_motion
         - binary_sensor.driveway_camera_motion
         - binary_sensor.patio_camera_motion
         - binary_sensor.playarea_camera_motion
         - binary_sensor.frontdoor_camera_field_detection
         - binary_sensor.driveway_camera_field_detection
         - binary_sensor.patio_camera_field_detection
         - binary_sensor.playarea_camera_field_detection
         - binary_sensor.frontdoor_camera_line_crossing
         - binary_sensor.driveway_camera_line_crossing
         - binary_sensor.patio_camera_line_crossing
         - binary_sensor.playarea_camera_line_crossing
       to: 'on'
    condition:
      - condition: template
        value_template: '{{ states.input_boolean.notify_camera_motion.state == "on" }}'
      - condition: template
        value_template: >
          {% macro last_triggered(entity) %}
            {% set time_in_seconds = 30 %}
            {{ ( (as_timestamp(now()) - as_timestamp(states["binary_sensor"][entity].attributes.last_tripped_time)))|round|abs < time_in_seconds }}
          {% endmacro %}
          {{ last_triggered(trigger.entity_id.split('.')[1].split('_')[0] ~ '_camera_motion')}}
    action:
      - service: image_processing.scan
        data_template:
          entity_id: "image_processing.facebox_{{- trigger.entity_id.split('.')[1].split('_')[0] -}}_camera"
      - service: image_processing.scan
        data_template:
          entity_id: "image_processing.tagbox_{{- trigger.entity_id.split('.')[1].split('_')[0] -}}_camera"

#
# This automation alerts (when someone is at home) and the cameras detect people around the house.
# There is a setting/input_boolean to control that
#
  - alias: Alert People Activity
    initial_state: true
    hide_entity: true
    trigger:
      - platform: state
        entity_id:
          - image_processing.facebox_frontdoor_camera
          - image_processing.facebox_driveway_camera
          - image_processing.facebox_patio_camera
          - image_processing.facebox_playarea_camera
    condition:
      - condition: template
        value_template: '{{ states.input_boolean.notify_camera_motion.state == "on" }}'
      - condition: template
        value_template: '{{ trigger.to_state.state | default(0) | int > 0 }}'
    action:
      - service: script.notify_me
        data_template:
          message: "{{ trigger.to_state.state }} {{ 'person' if trigger.to_state.state | int == 1 else 'people' }} detected on {{ states['camera'][trigger.entity_id.split('.')[1].split('_')[1] ~ '_camera'].attributes.friendly_name }}!"
      - service: script.voice_notify
        data_template:
          message: "{{ trigger.to_state.state }} {{ 'person' if trigger.to_state.state | int == 1 else 'people' }} detected on {{ states['camera'][trigger.entity_id.split('.')[1].split('_')[1] ~ '_camera'].attributes.friendly_name }}!"
      - service: notify.ios_devices
        data_template:
          message: "Check {{ trigger.entity_id.split('.')[1].split('_')[0] | title }} camera."
          data:
            push:
              category: camera
            entity_id: "camera.{{ trigger.entity_id.split('.')[1].split('_')[0] ~ '' ~ '_camera' }}"
            attachment:
              url: "{{ states.camera[trigger.entity_id.split('.')[1].split('_')[0] ~ '' ~ '_camera'].attributes.entity_picture }}"
              content-type: jpg
