###############################################################################
#   @author         :   Mahasri Kalavala
#   @date           :   07/16/2017
#   @package        :   Cameras
#   @description    :   Cameras and the automations
###############################################################################
homeassistant:
  customize:

    ################################################
    ## Node Anchors
    ################################################

    package.node_anchors:
      customize: &customize
        package: 'cameras'

      exposed: &exposed
        <<: *customize
        emulated_hue_hidden: true
        homebridge_hidden: false
        critical: true

      not_exposed: &not_exposed
        <<: *customize
        emulated_hue_hidden: false
        homebridge_hidden: true
        critical: false

      hidden: &hidden
        <<: *customize
        hidden: true
        critical: false

# Front Door Camera
    binary_sensor.frontdoor_camera_motion:
      friendly_name: Frontdoor Camera Motion
      hidden: false
    binary_sensor.frontdoor_camera_field_detection:
      friendly_name: Frontdoor Field Detection
      hidden: false
    binary_sensor.frontdoor_camera_line_crossing:
      friendly_name: Frontdoor Line Crossing
      hidden: false
    binary_sensor.frontdoor_camera_tamper_detection:
      friendly_name: Frontdoor Camera Tamper Detection
      hidden: false

# Driveway Camera
    binary_sensor.driveway_camera_motion:
      friendly_name: Driveway Camera Motion
      hidden: false
    binary_sensor.driveway_camera_field_detection:
      friendly_name: Driveway Field Detection
      hidden: false
    binary_sensor.driveway_camera_line_crossing:
      friendly_name: Driveway Line Crossing
      hidden: false
    binary_sensor.driveway_camera_tamper_detection:
      friendly_name: Driveway Camera Tamper Detection
      hidden: false

# Patio Camera
    binary_sensor.patio_camera_motion:
      friendly_name: Patio Camera Motion
      hidden: false
    binary_sensor.patio_camera_field_detection:
      friendly_name: Patio Field Detection
      hidden: false
    binary_sensor.patio_camera_line_crossing:
      friendly_name: Patio Line Crossing
      hidden: false
    binary_sensor.patio_camera_tamper_detection:
      friendly_name: Patio Camera Tamper Detection
      hidden: false

# Playarea Camera
    binary_sensor.playarea_camera_motion:
      friendly_name: Playarea Camera Motion
      hidden: false
    binary_sensor.playarea_camera_field_detection:
      friendly_name: Playarea Field Detection
      hidden: false
    binary_sensor.playarea_camera_line_crossing:
      friendly_name: Playarea Line Crossing
      hidden: false
    binary_sensor.playarea_camera_tamper_detection:
      friendly_name: Playarea Camera Tamper Detection
      hidden: false

    image_processing.facebox_frontdoor_camera:
      friendly_name: People @ Front Door
    image_processing.facebox_driveway_camera:
      friendly_name: People @ Driveway
    image_processing.facebox_patio_camera:
      friendly_name: People @ Patio
    image_processing.facebox_playarea_camera:
      friendly_name: People @ Playarea

    image_processing.tagbox_frontdoor_camera:
      friendly_name: Frontdoor Tag
    image_processing.tagbox_driveway_camera:
      friendly_name: Driveway Tag
    image_processing.tagbox_playarea_camera:
      friendly_name: Playarea Tag
    image_processing.tagbox_patio_camera:
      friendly_name: Patio Tag

    sensor.frontdoor_camera_objects:
      friendly_name: Things At Front Door
    sensor.driveway_camera_objects:
      friendly_name: Things At Driveway
    sensor.playarea_camera_objects:
      friendly_name: Things At Playarea
    sensor.patio_camera_objects:
      friendly_name: Things At Patio
    sensor.frontdoor_camera_people:
      friendly_name: People At Front Door
    sensor.driveway_camera_people:
      friendly_name: People Driveway
    sensor.playarea_camera_people:
      friendly_name: People Playarea
    sensor.patio_camera_people:
      friendly_name: People Patio

group:
  Frontyard Cameras:
    entities:
      - camera.frontdoor_camera
      - camera.driveway_camera
      - camera.garage_camera

  Backyard Cameras:
    entities:
      - camera.patio_camera
      - camera.playarea_camera

  Camera Motion:
    entities:
      - binary_sensor.frontdoor_camera_motion
      - binary_sensor.driveway_camera_motion
      - binary_sensor.patio_camera_motion
      - binary_sensor.playarea_camera_motion

  Camera Field Detection:
    entities:
      - binary_sensor.frontdoor_camera_field_detection
      - binary_sensor.driveway_camera_field_detection
      - binary_sensor.patio_camera_field_detection
      - binary_sensor.playarea_camera_field_detection
      
  Camera Line Crossing:
    entities:
      - binary_sensor.frontdoor_camera_line_crossing
      - binary_sensor.driveway_camera_line_crossing
      - binary_sensor.patio_camera_line_crossing
      - binary_sensor.playarea_camera_line_crossing

  Camera Tamper Detection:
    entities:
      - binary_sensor.frontdoor_camera_tamper_detection
      - binary_sensor.driveway_camera_tamper_detection
      - binary_sensor.patio_camera_tamper_detection
      - binary_sensor.playarea_camera_tamper_detection

  People That Cameras See:
    entities:
      - image_processing.facebox_frontdoor_camera
      - image_processing.facebox_driveway_camera
      - image_processing.facebox_patio_camera
      - image_processing.facebox_playarea_camera

  Tags That Cameras See:
    entities:
      - image_processing.tagbox_frontdoor_camera
      - image_processing.tagbox_driveway_camera
      - image_processing.tagbox_playarea_camera
      - image_processing.tagbox_patio_camera

  Camera Activity:
    entities:
      - sensor.frontdoor_camera_objects
      - sensor.driveway_camera_objects
      - sensor.playarea_camera_objects
      - sensor.patio_camera_objects
      - sensor.frontdoor_camera_people
      - sensor.driveway_camera_people
      - sensor.playarea_camera_people
      - sensor.patio_camera_people

#
# The camera url format in secrets.yaml would look like this: 
# frontdoor_camera_url: http://username:password@192.168.xxx.xxx/ISAPI/Streaming/channels/101/picture
#
camera:
  - platform: generic
    name: Frontdoor Camera
    still_image_url: !secret frontdoor_camera_url

  - platform: generic
    name: Driveway Camera
    still_image_url: !secret driveway_camera_url

  - platform: generic
    name: Patio Camera
    still_image_url: !secret patio_camera_url

  - platform: generic
    name: Playarea Camera
    still_image_url: !secret playarea_camera_url

  - platform: mjpeg
    mjpeg_url: http://192.168.1.189:8081
    name: Garage Camera

image_processing:
  - platform: facebox
    ip_address: !secret ha_ip_address
    scan_interval: 360
    port: 8080
    source:
      - entity_id: camera.frontdoor_camera
      - entity_id: camera.driveway_camera
      - entity_id: camera.patio_camera
      - entity_id: camera.playarea_camera

  - platform: tagbox
    scan_interval: 10000 # Default 10
    ip_address: !secret ha_ip_address
    port: 8081
    source:
      - entity_id: camera.frontdoor_camera
      - entity_id: camera.driveway_camera
      - entity_id: camera.patio_camera
      - entity_id: camera.playarea_camera

binary_sensor:

  - platform: hikvision
    name: Frontdoor Camera
    host: !secret frontdoor_camera_ip
    username: !secret camera_username
    password: !secret camera_password
    
  - platform: hikvision
    name: Driveway Camera
    host: !secret driveway_camera_ip
    username: !secret camera_username
    password: !secret camera_password

  - platform: hikvision
    name: Patio Camera
    host: !secret patio_camera_ip
    username: !secret camera_username
    password: !secret camera_password

  - platform: hikvision
    name: Playarea Camera
    host: !secret playarea_camera_ip
    username: !secret camera_username
    password: !secret camera_password

sensor:


###
# Facebox related sensors
###
  - platform: template
    sensors:
      frontdoor_camera_people:
        value_template: >-
          {% set faces = state_attr('image_processing.facebox_frontdoor_camera', 'matched_faces') %}
          {% if None != faces %}
            {% if faces | list | count == 0 %}
              Clear
             {% else %}
            {%- for face in faces | list %}{%- if loop.first %}{% elif loop.last %} and {% else %}, {% endif -%}{{ face }}{%- endfor %}
            {% endif %}
          {% endif %}
        icon_template: mdi:cctv

  - platform: template
    sensors:
      driveway_camera_people:
        value_template: >-
          {% set faces = state_attr('image_processing.facebox_driveway_camera', 'matched_faces') %}
          {% if None != faces %}
            {% if faces | list | count == 0 %}
              Clear
             {% else %}
            {%- for face in faces | list %}{%- if loop.first %}{% elif loop.last %} and {% else %}, {% endif -%}{{ face }}{%- endfor %}
            {% endif %}
          {% endif %}
        icon_template: mdi:cctv

  - platform: template
    sensors:
      patio_camera_people:
        value_template: >-
          {% set faces = state_attr('image_processing.facebox_patio_camera', 'matched_faces') %}
          {% if None != faces %}
            {% if faces | list | count == 0 %}
              Clear
             {% else %}
            {%- for face in faces | list %}{%- if loop.first %}{% elif loop.last %} and {% else %}, {% endif -%}{{ face }}{%- endfor %}
            {% endif %}
          {% endif %}
        icon_template: mdi:cctv

  - platform: template
    sensors:
      playarea_camera_people:
        value_template: >-
          {% set faces = state_attr('image_processing.facebox_playarea_camera', 'matched_faces') %}
          {% if None != faces %}
            {% if faces | list | count == 0 %}
              Clear
             {% else %}
            {%- for face in faces | list %}{%- if loop.first %}{% elif loop.last %} and {% else %}, {% endif -%}{{ face }}{%- endfor %}
            {% endif %}
          {% endif %}
        icon_template: mdi:cctv

############################################################################################################################
# Tagbox related Sensors; Please don't go crazy looking at the code. Here is the simple explanation.
# The tagbox gives a bunch of tags for each picture, and I eliminate a bunch of unwanted tags by filtering them out
# The unwanted tags are something that I really don't care - like a Tree in the front yard.
# Then I do custom mapping of the tags that fits my needs. That way I can display what I want rather than what I was given.
# I have no control over what tagbox gives, I want to pick and choose tags irrespective of confidence level. 
############################################################################################################################

  - platform: template
    sensors:
      frontdoor_camera_objects:
        value_template: >-
          {% set attribs = state_attr('image_processing.tagbox_frontdoor_camera', 'tags') %}
          {%- if None != attribs -%}
            {%- set tag_map = {'Vehicle':'Car', 'Sedan':'Car', 'Luxury vehicle':'Car', 'Driving':'Car',
                               'Wheel':'Car', 'Automotive design':'Car', 'Automotive exterior':'Car', 
                               'Transport':'Car', 'Sports car':'Car', 'Land vehicle':'Car', 'Supercar':'Car',
                               'Waterway':'Rain', 'Super car': 'Car'
                             } -%}
            {%- set unwanted_tags = ['Asphalt', 'Backyard', 'City', 'Estate', 'Flower', 'Garden', 'Grass', 'Tree', 'Car', 'Vehicle', 'Suburb', 'Street',
                                     'Highway', 'Infrastructure', 'Lane', 'Lawn', 'Neighbourhood', 'Public space', 'Super car', 'Snow', 'Winter', 'Supercar',
                                     'Residential area', 'Road', 'Road surface', 'Sidewalk', 'Tarmac', 'Race track', 'Sport venue', 'Soil', 'Outdoor structure', 'Cartoon', 'Poster', 'Illustration',
                                     'Transport', 'Walkway', 'Yard', 'Screenshot', 'Night', 'Lighting and Light', 'Drawing', 'Sketch',
                                     'Black-and-white', 'Monochrome', 'Monochrome photography', 'Black and White', 'Parking lot', 'Parking',
                                     'Black', 'White', 'Darkness', 'Light', 'Text'] -%}
            {%- macro filter_unwanted(tags) -%}
             {%- set comma = joiner(',') -%}
              {%- for item in tags if item not in unwanted_tags -%}{{- comma() -}}{{- item -}}{% endfor %}{%- endmacro -%}
            {%- macro mapped_items(tags) -%}
             {%- set comma = joiner(',') -%}
              {%- for item in tags if item not in tag_map -%}{{- comma() -}}{{- item -}}
              {%- endfor -%}
            {%- for item in tags if item in tag_map -%}{{- comma() -}}{{- tag_map[item] -}}{%- endfor -%}
            {%- endmacro -%}
            {% macro get_final_output(output_list) %}
              {%- for x in output_list if x != "" -%}
              {%- if loop.first %}{% elif loop.last %},{% else %},{% endif -%}{{- x -}}
              {%- endfor -%}            
            {% endmacro %}
            {%- set result =  filter_unwanted(attribs| map(attribute='name')|list).split(',') -%}
            {%- set output = get_final_output(mapped_items(result).split(',') | unique|list) -%}
            {{- "Clear" if output |trim == "" else output -}}
          {% endif %}
        icon_template: mdi:cctv

  - platform: template
    sensors:
      driveway_camera_objects:
        value_template: >-
          {%- set attribs = state_attr('image_processing.tagbox_driveway_camera', 'tags') -%}
          {%- if None != attribs -%}
            {%- set tag_map = {'Vehicle':'Car', 'Sedan':'Car', 'Luxury vehicle':'Car', 'Driving':'Car',
                               'Wheel':'Car', 'Automotive design':'Car', 'Automotive exterior':'Car', 
                               'Transport':'Car', 'Sports car':'Car', 'Land vehicle':'Car','Supercar':'Car',
                               'Waterway':'Rain', 'Super car': 'Car'
                             } -%}
            {%- set unwanted_tags = ['Asphalt', 'Backyard', 'City', 'Estate', 'Flower', 'Garden', 'Grass', 'Tree', 'Car', 'Vehicle', 'Suburb', 'Street',
                                     'Highway', 'Infrastructure', 'Lane', 'Lawn', 'Neighbourhood', 'Public space', 'Super car', 'Sport venue', 'Supercar',
                                     'Residential area', 'Road', 'Road surface', 'Sidewalk', 'Tarmac', 'Race track', 'Snow', 'Winter', 'Soil', 'Outdoor structure', 'Cartoon', 'Poster', 'Illustration',
                                     'Transport', 'Walkway', 'Yard', 'Screenshot', 'Night', 'Lighting and Light', 'Drawing', 'Sketch',
                                     'Black-and-white', 'Monochrome', 'Monochrome photography', 'Black and White',
                                     'Black', 'White', 'Darkness', 'Light', 'Text'] -%}
            {%- macro filter_unwanted(tags) -%}
             {%- set comma = joiner(',') -%}
              {%- for item in tags if item not in unwanted_tags -%}{{- comma() -}}{{- item -}}{% endfor %}{%- endmacro -%}
            {%- macro mapped_items(tags) -%}
             {%- set comma = joiner(',') -%}
              {%- for item in tags if item not in tag_map -%}{{- comma() -}}{{- item -}}
              {%- endfor -%}
            {%- for item in tags if item in tag_map -%}{{- comma() -}}{{- tag_map[item] -}}{%- endfor -%}
            {%- endmacro -%}
            {% macro get_final_output(output_list) %}
              {%- for x in output_list if x != "" -%}
              {%- if loop.first %}{% elif loop.last %},{% else %},{% endif -%}{{- x -}}
              {%- endfor -%}            
            {% endmacro %}
            {%- set result =  filter_unwanted(attribs| map(attribute='name')|list).split(',') -%}
            {%- set output = get_final_output(mapped_items(result).split(',') | unique|list) -%}
            {{- "Clear" if output |trim == "" else output -}}
          {% endif %}
        icon_template: mdi:cctv

  - platform: template
    sensors:
      patio_camera_objects:
        value_template: >-
          {% set attribs = state_attr('image_processing.tagbox_patio_camera', 'tags') %}
          {%- if None != attribs -%}
            {%- set tag_map = {'Waterway':'Rain'} -%}
            {%- set unwanted_tags = ['Asphalt', 'Backyard', 'City', 'Estate', 'Flower', 'Garden', 'Grass', 'Tree', 'Vehicle','Driving', 'Transport', 'Car', 'Vehicle', 'Suburb', 'Street',
                                     'Highway', 'Infrastructure', 'Lane', 'Lawn', 'Neighbourhood', 'Public space', 'Car', 'Wheel', 'Sports car','Super car', 'Sport venue', 'Outdoor structure', 'Cartoon', 'Poster', 'Illustration',
                                     'Residential area', 'Road', 'Road surface', 'Sidewalk', 'Tarmac', 'Race track', 'Sedan', 'Automotive design', 'Snow', 'Winter', 'Soil', 
                                     'Transport', 'Walkway', 'Yard', 'Screenshot', 'Night', 'Lighting and Light', 'Luxury vehicle', 'Automotive exterior', 'Drawing', 'Sketch',
                                     'Black-and-white', 'Monochrome', 'Monochrome photography', 'Black and White', 'Black', 'White', 'Light', 'Text'] -%}
            {%- macro filter_unwanted(tags) -%}
             {%- set comma = joiner(',') -%}
              {%- for item in tags if item not in unwanted_tags -%}{{- comma() -}}{{- item -}}{% endfor %}{%- endmacro -%}
            {%- macro mapped_items(tags) -%}
             {%- set comma = joiner(',') -%}
              {%- for item in tags if item not in tag_map -%}{{- comma() -}}{{- item -}}
              {%- endfor -%}
            {%- for item in tags if item in tag_map -%}{{- comma() -}}{{- tag_map[item] -}}{%- endfor -%}
            {%- endmacro -%}
            {% macro get_final_output(output_list) %}
              {%- for x in output_list if x != "" -%}
              {%- if loop.first %}{% elif loop.last %},{% else %},{% endif -%}{{- x -}}
              {%- endfor -%}            
            {% endmacro %}
            {%- set result =  filter_unwanted(attribs| map(attribute='name')|list).split(',') -%}
            {%- set output = get_final_output(mapped_items(result).split(',') | unique|list) -%}
            {{- "Clear" if output |trim == "" else output -}}
          {% endif %}
        icon_template: mdi:cctv

  - platform: template
    sensors:
      playarea_camera_objects:
        value_template: >-
          {% set attribs = state_attr('image_processing.tagbox_playarea_camera', 'tags') %}
          {%- if None != attribs -%}
            {%- set tag_map = {'Waterway':'Rain'} -%}
            {%- set unwanted_tags = ['Asphalt', 'Backyard', 'City', 'Estate', 'Flower', 'Garden', 'Grass', 'Tree', 'Vehicle','Driving', 'Transport', 'Car', 'Vehicle', 'Suburb', 'Street',
                                     'Highway', 'Infrastructure', 'Lane', 'Lawn', 'Neighbourhood', 'Public space', 'Car', 'Wheel', 'Sports car', 'Super car', 'Winter', 'Soil', 
                                     'Residential area', 'Road', 'Road surface', 'Sidewalk', 'Tarmac', 'Race track', 'Sedan', 'Automotive design', 'Snow', 'Sport venue', 'Outdoor structure', 'Cartoon', 'Poster', 'Illustration',
                                     'Transport', 'Walkway', 'Yard', 'Screenshot', 'Night', 'Lighting and Light', 'Luxury vehicle', 'Automotive exterior', 'Drawing', 'Sketch',
                                     'Black-and-white', 'Monochrome', 'Monochrome photography', 'Black and White', 'Black', 'White', 'Light', 'Text'] -%}
            {%- macro filter_unwanted(tags) -%}
             {%- set comma = joiner(',') -%}
              {%- for item in tags if item not in unwanted_tags -%}{{- comma() -}}{{- item -}}{% endfor %}{%- endmacro -%}
            {%- macro mapped_items(tags) -%}
             {%- set comma = joiner(',') -%}
              {%- for item in tags if item not in tag_map -%}{{- comma() -}}{{- item -}}{%- endfor -%}
            {%- for item in tags if item in tag_map -%}{{- comma() -}}{{- tag_map[item] -}}{%- endfor -%}
            {%- endmacro -%}
            {% macro get_final_output(output_list) %}
              {%- for x in output_list if x != "" -%}
              {%- if loop.first %}{% elif loop.last %},{% else %},{% endif -%}{{- x -}}
              {%- endfor -%}            
            {% endmacro %}
            {%- set result =  filter_unwanted(attribs| map(attribute='name')|list).split(',') -%}
            {%- set output = get_final_output(mapped_items(result).split(',') | unique|list) -%}
            {{- "Clear" if output |trim == "" else output -}}
          {% endif %}
        icon_template: mdi:cctv

############################################################################################################################
# Basic Automations that alert me when things change from the camera point of view.
############################################################################################################################
automation:

  - alias: Alert Family Member Activity
    trigger:
      - platform: state
        entity_id: 
          - sensor.frontdoor_camera_people
          - sensor.driveway_camera_people
          - sensor.patio_camera_people
          - sensor.playarea_camera_people
    condition:
      - condition: template
        value_template: '{{ states.input_boolean.notify_camera_motion.state == "on" }}'
      - condition: template
        value_template: '{{ trigger.to_state.state | trim != "" and trigger.to_state.state | trim != "unknown" and trigger.to_state.state | trim != "Clear" }}'
    action:
      - service: script.notify_me
        data_template:
          message: >-
            {% set camera_name = states['camera'][trigger.entity_id.split('.')[1].split('_')[0] ~ '_camera'].attributes.friendly_name %}
            {{ trigger.to_state.state }} is at the {{ camera_name }}.

  - alias: Alert Object Activity
    trigger:
      - platform: state
        entity_id: 
          - sensor.frontdoor_camera_objects
          - sensor.driveway_camera_objects
          - sensor.patio_camera_objects
          - sensor.playarea_camera_objects
    condition:
      - condition: template
        value_template: '{{ states.input_boolean.notify_camera_motion.state == "on" }}'
      - condition: template
        value_template: '{{ trigger.to_state.state | trim != "" and trigger.to_state.state | trim != "unknown" and trigger.to_state.state | trim != "Clear" }}'
    action:
      - service: script.notify_me
        data_template:
          message: >-
            {% set camera_name = states['camera'][trigger.entity_id.split('.')[1].split('_')[0] ~ '_camera'].attributes.friendly_name %}
            {{ trigger.to_state.state }} detected at the {{ camera_name }}.
#
# This automation basically scans image and keeps a count of people from each camera view and notifies using iOS notification
# There is another automation that alerts in the house (using TTS) based on the data
#
  - alias: Scan People and Notify
    initial_state: true
    hide_entity: true
    trigger:
     - platform: state
       entity_id:
         - binary_sensor.frontdoor_camera_motion
         - binary_sensor.driveway_camera_motion
         - binary_sensor.patio_camera_motion
         - binary_sensor.playarea_camera_motion
         - binary_sensor.frontdoor_camera_field_detection
         - binary_sensor.driveway_camera_field_detection
         - binary_sensor.patio_camera_field_detection
         - binary_sensor.playarea_camera_field_detection
         - binary_sensor.frontdoor_camera_line_crossing
         - binary_sensor.driveway_camera_line_crossing
         - binary_sensor.patio_camera_line_crossing
         - binary_sensor.playarea_camera_line_crossing
       to: 'on'
    condition:
      - condition: template
        value_template: '{{ states.input_boolean.notify_camera_motion.state == "on" }}'
      - condition: template
        value_template: >
          {% macro last_triggered(entity) %}
            {% set time_in_seconds = 30 %}
            {{ ( (as_timestamp(now()) - as_timestamp(states["binary_sensor"][entity].attributes.last_tripped_time)))|round|abs < time_in_seconds }}
          {% endmacro %}
          {{ last_triggered(trigger.entity_id.split('.')[1].split('_')[0] ~ '_camera_motion')}}
    action:
      - service: image_processing.scan
        data_template:
          entity_id: "image_processing.facebox_{{- trigger.entity_id.split('.')[1].split('_')[0] -}}_camera"
      - service: image_processing.scan
        data_template:
          entity_id: "image_processing.tagbox_{{- trigger.entity_id.split('.')[1].split('_')[0] -}}_camera"


# Before you think this code is crazy, here is an explanation.
#
# I have a xiaomi aqara PIR motion sensor near the front door, and when it triggers, I capture photo
# from the camera, save it locally using last_triggered date and time... and then send that image 
# to my email as an attacment.
#
# In the action, I have multiple services I am calling, and one service creates file, and I needed
# that file name in the second service. Since I can't pass info between the services within an action,
# I generate the file name based on the automation's last_triggered date, and that info is same across
# all the services, and I can access the file name ;)
#
# I only send iOS notifications when I am home, as my HA is not exposed to Internet, and I can't see my camera 
# unless I login to my vpn on my device. That's why you see the condition right above iOS notification service.
#
# Make sure you add the path to the white_list in the configuration.yaml file.
#
# If the front door is open, wait for a couple of seconds, and take picture!
#
  - alias: Motion Detected at Front Door
    initial_state: true
    hide_entity: true
    trigger:
      platform: state
      entity_id: binary_sensor.motion_sensor_158d00024ee084
      to: 'on'
    condition:
      - condition: template
        value_template: "{{ states.input_boolean.notify_camera_motion.state == 'on' }}"
    action:
      - service: script.voice_notify
        data:
          message: 'Someone is at the front door'
          greeting: 'no'
      - delay: "{{ '0:0:2' if states.binary_sensor.aeotec_zw120_door_window_sensor_gen5_sensor.state == 'on' else '0:0:0' }}"
      - service: camera.snapshot
        data_template:
          entity_id: "camera.frontdoor_camera"
          filename: "{{ '/home/homeassistant/.homeassistant/www/downloads/camera/frontdoor/frontdoor_' ~  (states.automation.motion_detected_at_front_door.attributes.last_triggered ~ '').replace('-','_').replace(' ', '_').replace(':','_').replace('.','_').replace('+','_') ~ '.jpg' }}"
      - service: camera.snapshot
        data_template:
          entity_id: "camera.driveway_camera"
          filename: "{{ '/home/homeassistant/.homeassistant/www/downloads/camera/driveway/driveway_' ~  (states.automation.motion_detected_at_front_door.attributes.last_triggered ~ '').replace('-','_').replace(' ', '_').replace(':','_').replace('.','_').replace('+','_') ~ '.jpg' }}"
      - service: notify.notify_smtp
        data_template:
          title: 'Front door motion {{ now().strftime("%d %h %Y, %I:%M:%S %p") }}'
          message: 'Motion detected at the front door on {{ now().strftime("%d %h %Y, at %I:%M:%S %p") }}. Please see the images below.'
          data:
            images:
              - "{{ '/home/homeassistant/.homeassistant/www/downloads/camera/frontdoor/frontdoor_' ~  (states.automation.motion_detected_at_front_door.attributes.last_triggered ~ '').replace('-','_').replace(' ', '_').replace(':','_').replace('.','_').replace('+','_') ~ '.jpg' }}"
              - "{{ '/home/homeassistant/.homeassistant/www/downloads/camera/driveway/driveway_' ~  (states.automation.motion_detected_at_front_door.attributes.last_triggered ~ '').replace('-','_').replace(' ', '_').replace(':','_').replace('.','_').replace('+','_') ~ '.jpg' }}"
      - condition: template
        value_template: "{{ states.device_tracker.suresh_suresh.state == 'home' }}"
      - service: notify.ios_devices
        data_template:
          message: "Check Front Door camera!"
          data:
            push:
              category: camera
            entity_id: "camera.frontdoor_camera"
            attachment:
              url: "{{ states.camera.frontdoor_camera.attributes.entity_picture }}"
              content-type: jpg
